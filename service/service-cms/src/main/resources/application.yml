server:
  port: 8004
spring:
  application:
    name: service-cms
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/guli?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: root
    password: 15717747056HYb!
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  profiles:
    active: dev
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.216.1:8848
  redis:
    host: localhost
    port: 6379
    timeout: 1800000
    lettuce:
      pool:
        max-active: 20
        max-wait: -1
        #最大阻塞时间,负数表示没限制
        max-idle: 5
        min-idle: 0
    password: 123456
  cache:
    type: redis
    redis:
      # 解决缓存穿透问题
      cache-null-values: true
      # 解决缓存雪崩问题
      # 缓存雪崩主要是因为大量的key同时过期
      # 可以设计随机时间
      # 但这个随机时间是插入缓存的随机时间,因为过期时间段相同,所以他们的过期时间点是不同的
      # 如果你设置过期时间段为随机的,可能会造成因为插入缓存的时间点不同,而过期时间段又随机,就会导致过期时间点相同了
      # 这样子就会适得其反
      time-to-live: 30000

      #SpringCache总结:
#      1(读模式). 缓存穿透和缓存雪崩,缓存击穿问题在读模式下发生
#       1)前两者框架都进行自主解决
#       2)后者解决了一半,主要是在@Cacheable的sync=true里设置本地锁解决,没有用到分布式锁
#      2(写模式). 缓存一致性问题:
#        缓存一致性问题发生在写模式下,主要是写和读不一致的问题
#        该问题框架没有解决
#      3. 所以在读多写少这种情况下,就利用SpringCache.
#      SpringCache解决了读模式下大部分问题,即使底层使用同步关键字解决缓存击穿问题,这也没事.
#      下面来分析为什么没事:
#        首先,本地缓存产生的问题有两个:
#        一个是缓存不共享,所以首次打到各个服务器的请求都会查询数据库一遍.
#        另外一个问题是缓存数据不太一致,如果某个服务器修改了缓存,另外两台是无动于衷的.
#      但是在读多写少的情况:
#        读多无非是第一次会对数据库造成压力,如果调用的服务器链少,用本地缓存让每台服务器都查询一次数据库也不是不可.
#        另外,既然写的少了,缓存不一致的问题也很少发生,且服务器少,调用其他服务器同步更新缓存也不会造成很大压力
#        虽然在写的模式下会产生缓存不一致问题,但是这也不碍事,因为这些缓存都设置了过期时间,到时间过期就行.
#        因为在少写的这种模式下,数据很少改变,对一致性也没有太大要求